// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Modifier {
    uint public balance=0;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier ownerOnly() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    function deposit(uint val) public payable {
        require(val > 0, "amount must be greater than zero");
        balance += val;
    }

    function withdraw(uint256 amount) public ownerOnly {
        require(amount <= balance, "Insufficient balance to withdraw");

        uint256 oldBalance = balance;
        balance -= amount;

        assert(balance == oldBalance - amount);

        payable(owner).transfer(amount);
    }

    function triggerRevert() public pure {
        revert("This function always reverts");
    }


}
